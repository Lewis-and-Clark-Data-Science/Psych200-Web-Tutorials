{
  "hash": "e5bd3d55a306e97b671f072439c61623",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\neditor: visual\nfilters: \n  - webr\n  - naquiz\ntitle: \"Bio110 Cheatsheet\"\n---\n\n\n\n\n## Basic R Commands\n\n-   Basic arithmetic\n\n    -   Examples: `5*6`, `sqrt(9)`, `abs(-3)`\n\n    -   Type `help(command)` to find information about any command\n\n-   Create variables: Use `<-` or `=` to assign values to a variable.\n\n    -   Example: `x <- 7`\n\n-   Create a vector:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    vector <- c(1,3,7)\n    vector\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 1 3 7\n    ```\n    \n    \n    :::\n    :::\n\n\n\n\n### Basic Statistics\n\n-   `mean(vector)` : Calculates the mean of a given set of values.\n\n-   `median(vector)` : Calculates the median of a given set of values.\n\n-   `var(vector)`: Calculates the variance of a given set of values. \n\n-   `sd(vector)` : Calculates the standard deviation of a given set of values.\n\n-   `std.error(vector)`: Calculates the standard error of a given set of values. \n    \n    **IMPORTANT**: This command is stored in a package `plotrix`, so you must install and load plotrix to find standard error.\n\n-   `t.test(data$variableName)`: Calculates a t-test for a given set of values. Also outputs the **95% confidence interval**.\n\n-   `nrow(data)`: Calculates the total number of rows in a dataset\n\n-   `na.rm = TRUE` : Remove `NA` values. Add this as an argument to any of the statistics calculations. E.g. `mean(vector, na.rm=TRUE)`\n\n## Installing packages\n\n-   `install.packages(\"package\")`: Install a package. IMPORTANT: Only run this once in a single R session. Do not rerun unless you restart R. \n\n-   `library(package)`: Load a package that has already been installed.\n\n## Working with a data set in the tidyverse\n\nWe use the `tidyverse` package to analyze data in these tutorials. See directly above for how to install.\n\n### Uploading and Viewing a data set\n\n-   `dataFrame <- read_csv(\"myCSV.csv\")` : Creates a data frame from a file called `myCSV.csv`\n\n-   `data`: View your data - type the name and run code\n\n-   `head(dataFrame)`: View the first few entries in your data\n\n-   `str(dataFrame)`: Gives the structure of data frame\n\n-   `dataFrame$columnName`: Calls up specific column from a data frame\n\n-   `summary(dataFrame)`: Returns min, max, mean, meadian, 1st/3rd quartiles for all vectors in dataFrame\n\n\n### Grouping and Summarizing data\n\n-   `group_by(.data, column)`: Takes a dataset and groups it by a column/variable\n\n-   `summarize(.data, summaryStat = statistic formula)`: Takes a dataset and outputs summary statistics that you define.\n\n    -   `n()`: Calculates current group size. Can be used in `summarize` and `group_by`\n\n    -   Combine `group_by` and `summarize` using the pipe (`|>`) to see summary statistics for specific groups/variables.\n\n-   **The pipe:** Use `|>` OR `%>%` to string functions and data together. Read as \"AND THEN\".\n\n    Example:\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n      dataFrame |> \n        group_by(firstColumn)|> \n        summarize(mean_of_secondColumn = mean(secondColumn), \n                  standard_deviation_of_secondColumn = sd(secondColumn))\n    ```\n    :::\n\n\n\n\n### Filtering data\n\n-   `filter(data, columnName == \"some value\")`: Extract data with a specific condition, from a given column. \n\n    -   Use logical operators to combine conditions: `&` (and), `|` (or), `!` (not)\n\n    -   Use comparison operators to describe conditions: `<`, `>`, `==`, `!=`, `<=`, `>=`\n\n\n## GGPlot {#sec-ggplot}\n\n### Resources:\n\n-   [GGPlot Cheatsheet pdf](https://rstudio.github.io/cheatsheets/data-visualization.pdf)\n\n-   [Posit.cloud ggplot cheatsheet, website version](https://rstudio.github.io/cheatsheets/html/data-visualization.html)\n\n### GGPlot Basics:\n\n-   **Basic structure:**\n\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    ggplot(data, mapping=aes()) +\n          geom_function()\n    ```\n    :::\n\n\n\n\n-   Connect different properties using a `+`\n\n-   **Basic Components:**\n\n    -   Data: `data=dataSet`: Define your data set\n\n    -   Aesthetics: `mapping = aes(variables)`: Define the variables. Can also specify color/fill for your graph and geometries. For example: `mapping=aes(x=____, y=_____, color=\"____\")`\n\n    -   Geometry: `geom_object()`: Define the type of plot\n\n### Geometries\n\n-   `geom_histogram()`: Creates a histogram\n\n    -   Syntax: `geom_histogram(bins=X)` Specify number of bins\n    \n-   `geom_boxplot()`: Creates a boxplot\n\n    -   Add error bars: `stat_boxplot(geom=\"errorbar\")`\n\n-   `geom_point()`: Creates points (scatterplot) for each data point\n\n    -   Can specify `color = ___`, `shape = ____`, `size = ____`\n\n-   `geom_col()` : Creates a bar graph with pre-aggregated data that you input\n\n      -   Add error bars: `geom_errorbar(mapping=aes(ymin, ymax), width)`\n\n-   `geom_smooth(method=\"lm\", se=FALSE)`: Creates a line of best fit\n\n### Plot Customization\n\nChain these onto your functions with a `+` to customize your plot:\n\n-   `labs(x=\"____\", y=\"____\", title=\"______\")` : Add a title and axes labels to your graph\n\n-   `scale_x_discrete(labels=c(\"firstLabel\", \"secondLabel\"))`: Add labels for individual categories on the x axis\n\n-   `xlim(minLimit, maxLimit)` and `ylim(minLimit, maxLimit)`: Specify x and y minimum and maximum values\n\n-   `facet_wrap(~ variable)`: Create separate plots for each aspect of a given variable. Creates a clustered plot.\n\n-   `color=\"____\"` and `fill=\"_____\"`: Change the outline color (color) and filled in color (fill) of your plot. Add these commands in the `geom_object()` parentheses. \n\n\n-   And lots more!\n\n## Inferential statistics {#sec-infstats}\n\n### Regression Analysis\n\n-   `lm(data$yVariable ~ data$xVariable)`: Create a linear model by performing regression analysis.\n\n-   `summary(model)`: View multiple statistics, including p-values, of a given model.\n\n### 2 Sample t-test\n\nCompare two samples that are normally distributed.\n\n-   `t.test(data$depVar ~ data$indVar)`: two sample t-test, when your 2 groups are listed in the *same* dependent variable. They will be grouped by the independent variable.\n\n-   `t.test(varA, varB)`: two sample t-test, when your 2 groups are in *different* variables/columns\n\n### Wilcoxon test\n\nCompare 2 samples that are not normally distributed.\n\n-   `wilcox.test(data$depVar~data$indVar)`: Wilcoxon test\n\n### ANOVA test and Tukey's test\n\nCompare more than 2 groups\n\n-   `model <- aov(depvar~indvar)`: Perform an ANOVA test for multiple groups and save it to a variable `model`.\n\n-   `summary(model)`: Use this to view the p-value for your ANOVA test.\n\n-   `TukeyHSD(model)`: Perform a Tukey's test on your ANOVA model.\n\n-   `model<-aov(data$depvar ~ data$indVar1*data$indVar2)`: Perform a two way ANOVA test (with 2 independent variables) and save it to a variable `model`. \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}