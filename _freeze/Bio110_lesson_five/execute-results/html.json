{
  "hash": "0fa959563e7eee8f3ef0fe72dde62ead",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\neditor: visual\nfilters: \n  - webr\n  - naquiz\ntitle: \"Lesson 5: Boxplots and scatterplots\"\n---\n\n\n\n\n```{webr-r}\n#| context: setup\nlibrary(tidyverse)\nurl<- \"https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/physiology_data.csv\"\ndownload.file(url, \"physiology_data.csv\")\n#Pulls data that has been loaded into the Bio 110 github repo. \n# Note: must include physiology_data.csv under resources in the quarto.yml file. Then render and commit to github. then can use the main website url and add \"physiology_data.csv\" at the end after the slash \n\ndata<- read.csv(\"physiology_data.csv\")\n\nurl<- \"https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/Boxplot_quartiles.png\"\ndownload.file(url, \"Boxplot_quartiles.png\")\n\n```\n\n## Introduction\n\nWelcome to lesson five, where you will learn the basics of graphing using boxplots and scatterplots.\n\nSee [the home page](index.qmd){target=\"_blank\"} for more details on how to use this tutorial and for troubleshooting tips!\n\nIn the previous lesson, we introduced GGPlot and made a histogram. In this lesson, we'll continue to use GGPlot, but learn new ways to customize plots.\n\nWe will work with the physiology dataset, called `data`, that you have already seen. Type the word data to recall what it contains.\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Boxplots\n\nBoxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. To create a boxplot, you need one variable that is **categorical** and one that is **continuous**.\n\nThe command `geom_boxplot()` will create a boxplot. We will add this as a `geom_object()` to our `ggplot()` function using a `+`. The structure of the code looks like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes()) +\n  geom_boxplot()\n```\n:::\n\n\n\n\n### Specifying the type of variable {#sec-var-type}\n\nBefore we create a boxplot, we need to tell R what kind of variables we are inputting.\n\nWhen creating a boxplot, our x variable should be **categorical** (called a **factor** variable in R language). A categorical variable has defined categories or groups.\n\nOur y variable should be **continuous**. A continuous variable can take any numerical value.\n\n::: panel-tabset\n## Question 5.2\n\n::: question\n**Which variable in our dataset is a categorical variable?**\n\n::: choices\n::: choice\nRQ\n:::\n\n::: choice\nheart_rate\n:::\n\n::: {.choice .correct-choice}\nCondition\n:::\n:::\n:::\n\n## Answer and reasoning\n\nIn `data` the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions. So `Condition` is a categorical variable because it has two different categories (or groups) that the measurements are placed into\n:::\n\nBefore we can create a boxplot, we have to tell R that whether our variable is a categorical variable. In R language, a categorical variable is called a \"factor\" variable. You can use this command to convert a variable to a categorical (or factor) variable: `data$variableName <- as.factor(data$variableName)`.\n\nTry that now with the categorical variable in `data`.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Check your work\n\nRun the following code to check your work. If the output is \"Factor w/ 2 levels....\", then you wrote the right code! If not, try again.\n\n```{webr-r}\nstr(data$Condition)\n```\n\n## Hint\n\nThe `Condition` variable should be categorical. So convert it to a factor variable (in R language).\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$Condition <- as.factor(data$Condition)\n```\n:::\n\n\n\n:::\n\nFinally, we can create a boxplot! Specify the x variable as `Condition` and use `heart_rate` for the y variable.\n\nHere's the basic structure for your code again:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes()) +\n  geom_boxplot()\n```\n:::\n\n\n\n\nAdd the x and y variables to create a boxplot. As an extra bonus, add labels and color!\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(x= _______, y= ________)) +\n  geom_boxplot()\n```\n:::\n\n\n\n\n## Hint\n\nMake sure you use the proper capitalization and spelling for the x variable, exactly as it is shown in our `data`.\n\n## Hint\n\nIf you get a weird looking boxplot, return to the previous code chunk and make sure you converted `Condition` to a factor variable.\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$Condition <- as.factor(data$Condition)\n\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot()\n```\n:::\n\n\n\n:::\n\nIf your code worked, you should see a boxplot for each condition, 1 (exercise) and 2 (resting). The boxplot displays the median, quartiles and outliers for each condition.\n\nHere's an image that illustrates how to interpret a boxplot: ![FromÂ https://datatab.net/tutorial/box-plot](Boxplot_quartiles.png)\n\n::: {.border .p-3}\n::: question\n**Looking at the boxplot you created, what is the 1st quartile for condition 2 (resting)?**\n\n::: choices\n::: choice\n65\n:::\n\n::: {.choice .correct-choice}\n53\n:::\n\n::: choice\n73\n:::\n:::\n:::\n:::\n\n### Modifying a Boxplot\n\n#### Adding labels\n\nNow, try adding labels to your boxplot. We'll use the same function we used in lesson 4: `labs(x=\"_____\", y=\"______\", title=\"_________\")`. Try it now!\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Hint\n\nDon't forget to use a `+` to chain on the `labs()` function after `geom_boxplot()`.\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(______, mapping = aes(x= _______, y= ________)) +\n  geom_boxplot()+\n  labs(x=\"____\", y=\"_____\", title=\"_______\")\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot()+\n  labs(x=\"Condition\", y=\"Heart Rate\", title=\"Boxplot of heart rate during exercise and rest\")\n```\n:::\n\n\n\n:::\n\nBut these labels do not specify whether \"1\" and \"2\" refer to resting or exercise conditions. We can add the following function to change the labels on the x axis: `scale_x_discrete(labels=c(\"firstLabel\", \"secondLabel\"))`\n\nGive it a try!\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot() +\n  labs(x=\"Condition\", y=\"Heart Rate\", title=\"Boxplot of heart rate during exercise and rest\") +\n  scale_x_discrete(labels=c(\"_______\", \"_______\"))\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(x= Condition, y= heart_rate)) +\n  geom_boxplot()+\n  labs(x=\"Condition\", y=\"Heart Rate\", title=\"Boxplot of heart rate during exercise and rest\")+\n  scale_x_discrete(labels=c(\"Exercise\", \"Resting\"))\n```\n:::\n\n\n\n:::\n\n## Scatterplots\n\nSuppose we wanted to look at a scatterplot of the relationship between heart rate and respiratory quotient (RQ).\n\nWe can create a scatter plot by adding the geom `geom_point()` to the main `ggplot()` function. This will create a point for every data value.\n\nFollow the same overall structure that you used to create a boxplot and histogram. Try to create a scatterplot displaying the relationship between `heart_rate` (on the x-axis) and `RQ` (on the y-axis).\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Hint\n\nRecall the overall structure should be:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(____________))+\n  geom_ _________ ()\n```\n:::\n\n\n\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(x= _______, y= ________)) +\n  geom_point()\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping = aes(x= heart_rate, y= RQ)) +\n  geom_point()\n```\n:::\n\n\n\n:::\n\n### Adjust plot style\n\nJust like a boxplot, we can adjust the color, labels, and even the point size and shape.\n\n#### Point size, color, shape\n\nYou can adjust the size, color and shape of the point by adding arguments to the `geom_point()` function.\n\nFor example: `geom_point(color=\"red\", shape=\"circle\", size=1.5)`\n\nGive it a try! Create a scatter plot displaying the relationship between `heart_rate` (on the x-axis) and `RQ` (on the y-axis) and change the color, size and shape of the points.\n\nTry different shapes and colors - just type in their name and see if they work! R might not understand all the colors or shapes, but you can experiment and see which ones work or look it up online or check out [this linked pdf](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf){target=\"_blank\"} to see the colors that can be specified by name.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nUse the same code that you used in the code chunk just before this (you can just copy and paste!). Then add color, shape, and size specifications inside the parentheses of `geom_point()`.\n\nDon't forget to use quotation marks around your color and shape! Do NOT use quotation marks around the size.\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping=aes(x=heart_rate, y=RQ)) +\n  geom_point(color=\"______\", shape=\"_______\", size=________)\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping=aes(x=heart_rate, y=RQ)) +\n  geom_point(color=\"blue\", shape=\"triangle\", size=2)\n```\n:::\n\n\n\n:::\n\n#### Axis limits\n\nYou can also adjust the axis limits by chaining on the functions: `xlim(minLimit, maxLimit)` and `ylim(minLimit, maxLimit)`.\n\nFor example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping=aes(x=_____, y=_____)) +\n  geom_point() + \n  xlim(____, ____) +\n  ylim(____, _____)\n```\n:::\n\n\n\n\nLet's put everything together now! Create a scatterplot displaying the relationship between `heart_rate` (on the x axis) and `RQ` (on the y axis). Choose a color, size and shape for the points. Add reasonable x and y limits. And finally, add x and y axes labels and a title to your plot.\n\n(Feel free to copy and paste your code from previous code chunks)\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nCheck that you have quotation marks and parentheses in the right spots.\n\nDid you chain all the different functions together with a `+`?\n\nDid you spell all your variable names correctly?\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(_____, mapping=aes(x=______, y=______)) +\n  geom_point(color=\"______\", shape=\"_______\", size=________) +\n  xlim(____, ____) +\n  ylim(____, ____) +\n  labs(x=\"_____\", y=\"_____\", title=\"_____\")\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping=aes(x=heart_rate, y=RQ)) +\n  geom_point(color=\"blue\", shape=\"triangle\", size=2) +\n  xlim(40, 90) +\n  ylim(0.7, 1.1) +\n  labs(x=\"Heart Rate\", y=\"Respiratory Quotient\", title=\"Relationship between Heart Rate and Respiratory Quotient\")\n```\n:::\n\n\n\n:::\n\nNow you've learned the basics of creating a scatterplot when both the x and y variables are continuous. You know how to alter many aspects of your figure's appearance to make it clearer.\n\n### Scatterplots with a categorical variable\n\nNext, we'll look at making scatterplots when the independent (x) variable is categorical.\n\nSuppose you wanted to create a graph that compared the respiratory quotients (RQ) under the two conditions: exercise and resting. Remember that the `Condition` variable is **categorical** because it sorts the data values into two categories.\n\n#### Specifying Type of Variable\n\nFirst, let's tell R that `Condition` is a factor (categorical) variable. We already did this when we made a boxplot, so skip this step if you already did it and haven't refreshed the page since.\n\nDo you remember how to change a variable to a factor variable?\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n\n```\n\n## Answer\n\n```{webr-r}\ndata$Condition <- as.factor(data$Condition)\n```\n:::\n\n#### Scatterplot\n\nNow, create a scatterplot the `RQ`s of the two `Condition` groups, exercise and resting.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Hint\n\nYour x variable is `Condition` and your y variable is `heart_rate`\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping=aes(x=Condition, y=RQ))+\n  geom_point()\n```\n:::\n\n\n\n:::\n\nWhen you have one categorical variable and one continous variable, a scatterplot is only a good option if there are only a few data values, as in this example. Otherwise, use a boxplot.\n\n#### Axis labels on categorical scatterplot\n\nLet's add labels to our plot. You know how to add axes labels and a title, but how can we change the unhelpful labels \"1\" and \"2\"? We will use the same command we used when making a boxplot. Refer back to your code when you made a boxplot, and see if you can add labels to your scatterplot. Add some color too!\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Hint\n\nThe command you need to add is `scale_x_discrete(labels(c(\"________\", \"_________\")))`.\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(____, mapping=aes(x=______, y=______))+\n  geom_point(color=\"red\")+\n  labs(x=\"_______\", y=\"_______\", title=\"_______\")\n  scale_x_discrete(labels(c(\"________\", \"_________\")))\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, mapping=aes(x=Condition, y=RQ))+\n  geom_point(color=\"red\")+\n  labs(x=\"Condition\", y=\"Respiratory Quotient\", title=\"Respiratory Quotient at Rest or while Exercising\")+\n   scale_x_discrete(labels=c(\"Exercise\", \"Resting\"))\n```\n:::\n\n\n\n:::\n\n## Congratulations\n\nThat's it! Now you're an expert in making boxplots and scatterplots. In lesson six, you'll learn how to make two kinds of bar graphs.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}