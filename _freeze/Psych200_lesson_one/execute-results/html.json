{
  "hash": "7f694026d79ead63dbb001a65d846f74",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\neditor: visual\nfilters: \n  - webr\ntitle: \"Lesson 1: R Introduction, Working with Datasets\"\n\n---\n\n\n\n```{webr-r}\n#| context: setup\n\nlibrary(tidyverse)\nurl<- \"https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/physiology_data.csv\"\ndownload.file(url, \"physiology_data.csv\")\n#Pulls data that has been loaded into the Bio 110 github repo. \n# Note: must include physiology_data.csv under resources in the quarto.yml file. Then render and commit to github. then can use the main website url and add \"physiology_data.csv\" at the end after the slash \n\n```\n\n## Introduction\n\nWelcome to this introduction to R. You will learn how to enter data and to perform some basic operations. R is a programming language that is used to work with data. It can do lots of things, including basic arithmetic.\n\nFirst, let's try using R. In the code chunk right below this, try typing in a basic math problem, like `35*10`. Click the green `run code` button and see what happens.\n\n```{webr-r}\n#Type your code here!\n\n\n```\n\nThe rest of this tutorial will teach you how to work with data in R. It is interactive, so you'll be able to write your own code in code chunks like the one above throughout the tutorial. See [the home page](index.qmd){target=\"_blank\"} for more details on using the tutorials and for troubleshooting tips!\n\nThere are also hints and answers for most code chunks. Try to do each problem on your own, but feel free to use the hints and answers if you get stuck and to check your work!\n\n## Working with data\n\nR is a program for dealing with data. In Biology courses, most of the time your data will be in the form of a table with columns and rows.\n\nWe will start by working with a very simple set of data: data for a single variable. Later on, you will learn how to import your own data table into R in order to work with it.\n\nFor example, suppose you have measured the diameters of a sample of 8 bacterial colonies. The data values (in mm) are: 4, 3.5, 6.1, 2.2, 4.7, 3, 5.2, and 4.6.\n\n### Assigning values to a variable name {#sec-assign-variable}\n\nIn R, you 'assign' these values to a variable name using an 'arrow' formed by the 'less than' symbol and the dash, like this: `<-`.\n\nOn the left side of the arrow, put the name of the variable you wish to create. The name should be short, descriptive, and must not contain any spaces.\n\nOn the right of the arrow, type `c(your data values here)`. The `c` stands for 'concatenate' or 'combine' all the values into a single vector of values. In the parentheses, type your data values, separated by commas.\n\nThis command creates a variable called 'diam' that contains our example data values:\n\n`diam <- c(4, 3.5, 6.1, 2.2, 4.7, 3, 5.2, 4.6)`\n\nNow you try creating the `diam` variable using these same data. In the code chunk below, type in a command to create `diam`.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Answer\n\n```{webr-r}\ndiam<- c(4,3.5,6.1,2.2,4.7,3,5.2,4.6)\n```\n:::\n\nIf you want to see what a variable contains, you can just type its name. R is case-sensitive, so be careful about whether you type in upper or lower case.\n\nTry typing diam and see what you get.\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n### Importing data\n\nNext, we'll learn how to import and use large amounts of data. Specifically, we'll use R to view our data as a dataframe. A **dataframe** is just the R version of a data table.\n\nWe'll start with a `.csv` file. We can then use R to convert the `.csv` file into a dataframe, which will be much easier to work with.\n\nThe command we'll use is: `myDataFrame <- read.csv(\"myCSVFile.csv\")`.\n\n-   On the left side of the arrow, you'll create a name for your dataframe and write that instead of `myDataFrame`.\n\n-   On the right side of the arrow, in the quotation marks, you'll write the name of your CSV file.\n\nWe have pre-loaded a CSV file into this tutorial. It is called \"physiology_data.csv\". Let's try converting the CSV file into a dataframe in the code chunk below. We'll name the dataframe `data`.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Hint {style=\"background-color:yellow\"}\n\nThe name of your dataframe should **not** be in quotes, but the name of the .csv file **should** be in quotes.\n\n## Hint\n\n`__________ <- read.csv(\"physiology_data.csv\")`\n\n## Answer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.csv(\"physiology_data.csv\")\n```\n:::\n\n\n:::\n\n### Our data {#sec-our-data}\n\nNow, let's check if you did it right. In R, you can type the name of a dataframe to see it displayed. Try typing `data` into the code chunk below.\n\n::: panel-tabset\n## Code editor {#view_data}\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Answer\n\n```{webr-r}\ndata\n```\n:::\n\nYou can see that this dataframe contains 4 variables and 15 rows. (Also, each row is numbered sequentially; these numbers are not considered a variable.)\n\nThese data are from a physiological study. Each individual's respiratory quotient (RQ) was measured, either after exercise (1), or during rest (2). Their heart rates in beats per minute were also measured. NA stands for 'not available,' meaning that the data for these combinations of individual and variable were lost or not recorded.\n\n### Using data tables\n\n#### Dataframe set up:\n\n-   In an R dataframe, each *column* represents a different variable.\n\n-   Each observational unit is represented by a separate *row* in the table.\n\n-   The first row of the table contains the *names* of the different variables. In R, variable names cannot contain any spaces.\n\n#### Specifying Variables\n\nYou might wish to see just one of the variables in this data file. The way to specify an individual variable is to use the name of the data file, followed by the dollar sign, `$`, followed by the name of the variable with no spaces.\n\nThe syntax is: `yourDataName$variableName`\n\nWhat would you type to see a list of the `heart_rate` data values in this file?\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Answer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$heart_rate\n```\n:::\n\n\n:::\n\n### Data Structure\n\nIn R, each variable is encoded as either numeric (a number), integer (a whole number), a factor (a category, expressed either as a word or a number), or character (a string of letters). There are other less common variable properties as well. A variable's property is important because some operations can only be carried out on variables with certain properties.\n\nA data file's 'structure' refers to the properties of its variables. To find out the properties of all the variables in a data set, you would use the command `str(yourDataName)`, using the name of your data file in place of the placeholder here.\n\nWrite a command that will allow you to see the structure of `data`.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Answer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n:::\n\n\n:::\n\n#### Changing a variable's property {#sec-var-property}\n\nYou can see that the variable `data$Condition` is currently encoded as an integer. But it is actually a category variable.\n\nYou can change a variable's property with the assignment arrow, in the following way: `yourDataName$variableName <- as.variableType(yourDataName$variableName)`.\n\nFor example, to change the property of the `Condition` variable to a factor variable, you can run: `data$Condition <- as.factor(data$Condition)`.\n\nTry changing the variable named `Individual` to a factor variable. You will notice that a little prompt box shows up. You can save yourself some typing by choosing the rest of the expression from among the choices in the prompt box.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Check your work \n\nRun the structure command again to see if `Individual` has been changed to a factor variable. \n\n```{webr-r}\nstr(data)\n```\n\n## Hint\n\nRemember to use the dollar sign notation, and that R is case-sensitive.\n\n## Answer\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$Individual <- as.factor(data$Individual)\n```\n:::\n\n\n:::\n\n## R Packages {#sec-packages}\n\nR has a set of commands that it understands automatically. But, there are other commands that you can teach R. These \"extra\" commands live in packages that you can install and then use when you code with R. Essentially, a package contains a set of commands (and sometimes data) someone created that you can use in R, and in order to use the package, you have to install it. \n\nThroughout this tutorial, we've been using something called the `tidyverse` package to run commands. It contains helpful commands for viewing and rearranging data as well as graphing data (which we'll get to in future tutorials).\n\n`tidyverse` was pre-installed for you, but if you ever have to install a package in the future, run the command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\nAfter installing the package, you can load it using the command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nIn this tutorial, you won't need to worry about installing or loading packages, because they are pre-loaded for you. But when you start working on your own data outside of these tutorials, you will sometimes need to tell R to load certain packages.\n\n## Congratulations!\n\nYou have finished the first R tutorial. You have learned how to create a variable in R, import data and create a dataframe, and how to examine and change the properties of different variables.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}