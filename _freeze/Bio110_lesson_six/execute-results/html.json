{
  "hash": "0072b5a80fe7b165a64979ad882af8ac",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: html\neditor: visual\nfilters: \n  - webr\n  - naquiz\ntitle: \"Lesson 6: Bar Graphs\"\n---\n\n\n\n\n```{webr-r}\n#| context: setup\n\nurl<- \"https://lewis-and-clark-data-science.github.io/BIO-110-Web-Tutorials/bargraphdata.csv\"\n# Note: must include bargraphdata.csv under resources in the quarto.yml file. Then render and commit to github. then can use the main website url and add \"bargraphdata.csv\" at the end after the slash \n\ndownload.file(url, \"bargraphdata.csv\")\n\nbargraphdata <- read.csv(\"bargraphdata.csv\")\nlibrary(tidyverse)\nlibrary(plotrix)\nlibrary(gplots)\n```\n\n## Introduction\n\nWelcome. In this lesson, you will learn how to create simple bar graphs and clustered bar graphs, and how to add error bars to both types of graphs.\n\nWe'll continue to use ggplot, which was introduced in [lesson 4](Bio110_lesson_four.qmd){target=\"_blank\"}.\n\nSee [the home page](index.qmd){target=\"_blank\"} for more details on how to use this tutorial and for troubleshooting tips!\n\n## Dataset\n\nA dataset called `bargraphdata` has been loaded into this tutorial.\n\nType its name so that you can see what it contains.\n\n```{webr-r}\n#Type your code here\n\n\n```\n\nIt would also be good to understand the structure of the different variables. Type the command that allows you to see the structure of `bargraphdata`.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n#Type your code here\n\n\n```\n\n## Answer\n\n`str(bargraphdata)`\n:::\n\nThis dataset contains three variables. The data come from an experimental field study that lasted three years and involved 40 study plots. Each plot received one of two different experimental treatments.\n\n-   The first variable, `var1`, is a measurement that was made in each of the plots; this variable is numerical.\n\n-   The second variable, `treatment`, refers to whether a particular study plot received treatment A or treatment B; this is a factor (category) variable.\n\n-   The third variable, `year`, refers to the year in which the measurement was made.\n\n## Bar Graphs\n\nSuppose you want to make a bar graph that compares the means of `var1` for each of the two treatments. For now, imagine that you do not care about the year the measurement was made.\n\n### Identify data\n\nThe first thing you need to do is to identify the data that will be used to make each bar. Right now all of the data values for both bars are part of the same variable, `var1`. So we'll need to sort our data into groups (treatment A and B) and then calculate the mean for each group.\n\n::: {.border .p-3}\n::: question\n**Which functions do you think we could use to group our data and then calculate the mean for each group?**\n\nHint: You learned about it in [lesson two](Bio110_lesson_two.qmd){target=\"_blank\"}.\n\n::: choices\n::: choice\n`summarize()` and `select()` and `mean()`\n:::\n\n::: choice\n`filter()` and `mean()`\n:::\n\n::: {.choice .correct-choice}\n`group_by()` and `summarize()` and `mean()`\n:::\n:::\n:::\n:::\n\nIf you weren't sure which function to choose or what these functions do, review [lesson 2](Bio110_lesson_two.qmd#sec-groupby-sum){target=\"_blank\"}.\n\nFirst, we'll use `group_by()` to group our data by different treatment groups. Then we use `summarize()` to calculate the mean of each group. Try this now:\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nFirst, specify your dataset, called `bargraphdata`. Remember to use the pipe to string the functions together.\n\n## Hint\n\nHere's the basic setup:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbargraphdata |> \n  group_by(______) |>\n  summarize(avgVar1 = ________)\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbargraphdata |> \n  group_by(treatment) |>\n  summarize(avgVar1 = mean(var1))\n```\n:::\n\n\n\n:::\n\nYou should get a chart displaying the means of each treatment group. But, we need to be able to input that data into our graph, so we'll save it as a new variable.\n\nCopy and paste your code from the previous exercise and save it to a new variable called `tmtsummary`.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nRemember to use `<-` to assign data to a new variable name.\n\n## Answer\n\n```{webr-r}\ntmtsummary <- bargraphdata |> \n  group_by(treatment) |>\n  summarize(avgVar1 = mean(var1))\n```\n:::\n\nNow we can graph! We'll use the same structure we did to create a histogram, boxplot and scatterplot, but we'll use the geometry `geom_col()` to make our graph. Chain it onto the main `ggplot()` function using a `+` and use `tmtsummary` as your data.\n\nYour x variable will be `treatment` and your y variable will be the name that you created for the mean of variable 1. In my answer example, it is called `avgVar1`, but you can use any name, as long as you defined it in the code chunk above.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nHere's the basic structure:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(____, mapping = aes(______))+\n  geom_ ______()\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1))+\n  geom_col()\n```\n:::\n\n\n\n:::\n\n### Labels and color\n\nNow let's learn how to add color to the graph. We can color the bars by `treatment`, so that each treatment is a different color. Use your same code as before and type `fill=treatment` into the `aes()` command, after the x and y variables. Use a comma to separate the fill color from the x and y variables.\n\nGive it a try now! Also add labels to your graph.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nHere's the basic structure:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, _______))+\n  geom_col()+\n  labs(________)\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")\n```\n:::\n\n\n\n:::\n\n### Adding error bars {#sec-errorbars}\n\nIn lesson three, you learned about the importance of describing the variability in the data as well as its central tendency. This bar graph does not show the variability in `var1`. You can do that by adding error bars to the bars. The error bars can represent whatever measure of variability you choose: standard deviation, standard error, or 95% confidence limits.\n\n#### Compute measure of variability\n\nTo add error bars to your graph, you first need to compute the values for the measure of variability you have chosen to use. In this example, let's use the standard deviation.\n\nWe'll return to our `group_by()` and `summarize()` functions. Use the exact same code you used to create `tmtsummary` and add a calculation for standard deviation in `summarize()`. Save this summarized data to the same variable name `tmtsummary`. Give it at try!\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nYour summarize command will have the structure:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize(avgVar1 = mean(var1),\n          ______ = _____(____))\n```\n:::\n\n\n\n\nAll the other code will be the same as when you first defined `tmtsummary`\n\n## Hint\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmtsummary <- ________ |> \n  group_by(______)|>\n  summarize(avgVar1 = mean(var1),\n            _____ = sd(_____))\n```\n:::\n\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmtsummary <- bargraphdata |> \n  group_by(treatment)|>\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1))\n```\n:::\n\n\n\n:::\n\nNow we have our standard deviation data and we can use that to create error bars. The geom function for error bars is `geom_errorbar()`. We'll add an aesthetics argument to specify the max and min for the error bar.\n\nHere's how the error bar code will look:\n\n::: {.indent .p-.5}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_errorbar(mapping=aes(ymin = _______,\n                          ymax = _______))\n```\n:::\n\n\n\n:::\n\nTry adding this command to your bar graph. Fill in the ymin and the ymax. Note that: the minimum error bar value is the 'mean of var1 - sd of var1' and the maximum error bar value is the 'mean of var1 + sd of var1'.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nCopy and paste your code from the previous graph and chain on the `geom_errorbar()` function.\n\n## Hint\n\nYour `geom_errorbar()` function should look like:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                          ymax = avgVar1+sdVar1))\n```\n:::\n\n\n\n\n## Hint\n\nDid you define the data `tmtsummary` and include a calculation for standard deviation in it? Are all your variables spelled correctly? Are there enough parentheses?\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                          ymax = avgVar1+sdVar1))\n```\n:::\n\n\n\n:::\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Bonus challenge question\n\nCan you think of a way to use the pipe (`|>`) to join the `group_by()`/`summarize()` functions with `ggplot()`?\n\nYou won't need to define a new variable `tmtsummary` if you use this method. Give it a try - you may find it's actually easier than the previous method!\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n# Type your code here\n\n\n```\n\n## Hint\n\nAfter the `summarize()` function, simply pipe your data to `ggplot()`. Then, in `ggplot()`, you don't need to specify a dataset because it's included in the pipe!\n\n## Hint\n\nHere's the general setup:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbargraphdata |> \n  group_by()|>\n  summarize() |> \n  ggplot() + \n    geom_col()\n```\n:::\n\n\n\n\n## Answer\n\n```{webr-r}\n\nbargraphdata |> \n  group_by(treatment)|>\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) |>\n\n  ggplot(mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n    geom_col()+\n    labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n    geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                          ymax = avgVar1+sdVar1))\n```\n:::\n:::\n\nIf you would rather show standard error bars and you have loaded `plotrix`, you can substitute `std.error` for `sd` and get a bargraph with standard error bars.\n\n## Clustered bar graph {#sec-cluster}\n\nSuppose you were interested in a bar graph that not only compared the treatments, but also displayed if and how the years differed from each other. You can do this with what is called a clustered bar graph.\n\nIn this case, a clustered bar graph would have six different bars, one for each combination of treatment (A and B) and year (1, 2, and 3).\n\n### Specifying data and variables\n\nTo create a clustered bar graph, we'll chain on the command `facet_wrap(~variableName)` to our chain of ggplot functions. We can copy all our previous code, with just a few edits.\n\n-   Below you'll see the code we used to create our non-clustered graph in the previous step. (Yours may look slightly different, but that's ok!)\n\n-   You'll also see code to make a clustered bar graph, clustered by `year`. What's different from the non-clustered graph code?\n\n-   Finally, run the clustered bar graph code in the code editor!\n\n::: panel-tabset\n## Clustered bar graph code\n\nHere's the code you'll use to create a clustered bar graph code. Compare it to the code you used to create a bar graph in the previous step. What is different?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ntmtsummary<- bargraphdata |> \n  group_by(treatment, year)|>\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) \n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                            ymax = avgVar1+sdVar1))+\n  facet_wrap(~year)\n```\n:::\n\n\n\n\n## Non-clustered bar graph code\n\nHere's our code for the bar graph created in the [previous step](#sec-errorbars). Compare this code to the clustered bar graph code. What is different?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\ntmtsummary<- bargraphdata |> \n  group_by(treatment)|>\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) \n\nggplot(tmtsummary, mapping = aes(x=treatment, y=avgVar1, fill=treatment))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                            ymax = avgVar1+sdVar1))\n```\n:::\n\n\n\n\n## Code editor\n\nCopy and paste the code for the clustered bar graph to see what it does!\n\n```{webr-r}\n# Type your code here\n\n\n```\n:::\n\nHere are the edits made for the clustered bar graph:\n\n-   Line 2: `group_by(treatment, year)`: We're now interested in displaying treatment **and** year, so we want to group by both of those variables\n-   Line 11: `facet_wrap(~year)`: Tells R to cluster the bar graphs by year.\n\n#### Changing the cluster variable\n\nWhat if you wanted your bar graph to be clustered by `treatment` instead of `year`?\n\nGive it a try! It's not quite as simple as changing the `facet_wrap()` to `treatment`... there's a couple other edits you have to make. Mess around a bit and see if you can figure it out. After you try it yourself, use the hints to help you figure out what else you need to edit in your code.\n\n::: panel-tabset\n## Code editor\n\n```{webr-r}\n\n\n\n```\n\n## Hint\n\nIn line 11, change `facet_wrap(~year)` to `facet_wrap(~treatment)`\n\n## Hint\n\nLine 7: You'll need to change your x variable. It won't be `treatment` anymore because `treatment` is now the cluster variable NOT the variable on the x axis.\n\n## Hint\n\nHopefully you changed your x variable to `year`. Finally, also change the fill color to `year` (also line 7 in the aes() argument).\n\n## Answer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmtsummary<- bargraphdata |> \n  group_by(treatment, year)|>\n  summarize(avgVar1 = mean(var1),\n            sdVar1 = sd(var1)) \n\nggplot(tmtsummary, mapping = aes(x=year, y=avgVar1, fill=year))+\n  geom_col()+\n  labs(x=\"Treatment\", y=\"Average Variable 1\", title = \"Bar graph of the Mean of Variable 1 for Treatment A and B\")+\n  geom_errorbar(mapping=aes(ymin = avgVar1-sdVar1,\n                            ymax = avgVar1+sdVar1))+\n  facet_wrap(~treatment)\n```\n:::\n\n\n\n\n## Bonus - improve the legend\n\nYou may notice that the legend looks a little odd - it is continuous and doesn't show 3 separate values. This is because R thinks the `year` data is numerical, but we are treating it as a categorical (factor) variable.\n\nTry changing the year data to factor data and then rerunning the code to fix the legend. If you need a refresher on how to do switch a variable to a factor variable, check out [lesson 5](Bio110_lesson_five.qmd#sec-var-type){target=\"_blank\"}.\n\n```{webr-r}\n# Type your code here\n\n\n```\n:::\n\n## Congratulations\n\nThat's it! Now you know how to use bar graphs to di splay your data, including adding error bars and creating clustered bar graphs. Remember that if the distribution of data values is highly non-normal, boxplots are a more appropriate form of graphical display than bar graphs.\n\nNext lesson, we'll learn some basic statistics.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}